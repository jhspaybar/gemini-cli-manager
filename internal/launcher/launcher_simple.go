package launcher

import (
	"fmt"
	"os"
	"strings"
	"syscall"
	"time"

	"github.com/gemini-cli/manager/internal/extension"
	"github.com/gemini-cli/manager/internal/profile"
)

// SimpleLauncher handles launching Gemini CLI with profiles
type SimpleLauncher struct {
	profileManager   *profile.Manager
	extensionManager *extension.Manager
	geminiPath       string
	homeDir          string
}

// NewSimpleLauncher creates a new launcher instance
func NewSimpleLauncher(pm *profile.Manager, em *extension.Manager, geminiPath string) *SimpleLauncher {
	homeDir := os.Getenv("HOME")
	if homeDir == "" {
		homeDir = "."
	}

	return &SimpleLauncher{
		profileManager:   pm,
		extensionManager: em,
		geminiPath:       geminiPath,
		homeDir:          homeDir,
	}
}

// Launch executes Gemini CLI with the current profile
func (l *SimpleLauncher) Launch(profile *profile.Profile, extensions []*extension.Extension) error {
	// Build command
	args := []string{l.geminiPath}
	
	// Add any profile-specific arguments
	// For now, gemini CLI discovers extensions from ~/.gemini/extensions/
	// and loads enabled ones automatically
	
	// Set up environment
	env := os.Environ()
	
	// Add profile environment variables
	if profile != nil && profile.Environment != nil {
		envMap := make(map[string]string)
		
		// Parse existing environment
		for _, e := range env {
			parts := strings.SplitN(e, "=", 2)
			if len(parts) == 2 {
				envMap[parts[0]] = parts[1]
			}
		}
		
		// Add profile environment
		for k, v := range profile.Environment {
			envMap[k] = v
		}
		
		// Add Gemini-specific variables
		envMap["GEMINI_PROFILE"] = profile.Name
		envMap["GEMINI_PROFILE_ID"] = profile.ID
		
		// Convert back to slice
		env = make([]string, 0, len(envMap))
		for k, v := range envMap {
			env = append(env, fmt.Sprintf("%s=%s", k, v))
		}
	}
	
	// Use syscall.Exec to replace our process with Gemini CLI
	// This is the cleanest way to hand over the terminal
	return syscall.Exec(l.geminiPath, args, env)
}

// CreateLaunchScript generates a standalone launch script
func (l *SimpleLauncher) CreateLaunchScript(profile *profile.Profile, scriptPath string) error {
	script := &strings.Builder{}
	
	// Script header
	fmt.Fprintf(script, "#!/bin/bash\n")
	fmt.Fprintf(script, "# Generated by Gemini CLI Manager\n")
	fmt.Fprintf(script, "# Profile: %s\n", profile.Name)
	fmt.Fprintf(script, "# Generated: %s\n\n", time.Now().Format(time.RFC3339))
	
	// Environment variables
	if profile != nil && len(profile.Environment) > 0 {
		fmt.Fprintf(script, "# Profile Environment\n")
		for k, v := range profile.Environment {
			fmt.Fprintf(script, "export %s=\"%s\"\n", k, v)
		}
		fmt.Fprintf(script, "export GEMINI_PROFILE=\"%s\"\n", profile.Name)
		fmt.Fprintf(script, "\n")
	}
	
	// Note about extensions
	fmt.Fprintf(script, "# Extensions are managed in ~/.gemini/extensions/\n")
	fmt.Fprintf(script, "# Enable/disable them using the Gemini CLI Manager\n\n")
	
	// Launch Gemini
	fmt.Fprintf(script, "# Launch Gemini CLI\n")
	fmt.Fprintf(script, "exec %s \"$@\"\n", l.geminiPath)
	
	// Write script
	if err := os.WriteFile(scriptPath, []byte(script.String()), 0755); err != nil {
		return fmt.Errorf("writing script: %w", err)
	}
	
	return nil
}