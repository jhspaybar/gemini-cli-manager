// Example implementation of Card component following TabBar pattern
// This is a draft to demonstrate the component structure

package components

import (
	"fmt"
	"strings"
	
	"github.com/charmbracelet/lipgloss"
	"github.com/jhspaybar/gemini-cli-manager/internal/theme"
	"github.com/muesli/reflow/truncate"
)

// Card represents a reusable card UI component
type Card struct {
	width       int
	title       string
	titleIcon   string
	description string
	metadata    []MetadataItem
	selected    bool
	focused     bool
	
	// Styles
	normalStyle   lipgloss.Style
	selectedStyle lipgloss.Style
	focusedStyle  lipgloss.Style
}

// MetadataItem represents a key-value pair in the card
type MetadataItem struct {
	Key   string
	Value string
}

// NewCard creates a new card component
func NewCard(width int) *Card {
	return &Card{
		width:    width,
		metadata: []MetadataItem{},
		
		// Default styles using theme
		normalStyle: lipgloss.NewStyle().
			Border(lipgloss.RoundedBorder()).
			BorderForeground(theme.Border()).
			Padding(1, 2).
			Width(width),
			
		selectedStyle: lipgloss.NewStyle().
			Border(lipgloss.ThickBorder()).
			BorderForeground(theme.Primary()).
			Padding(1, 2).
			Width(width),
			
		focusedStyle: lipgloss.NewStyle().
			Border(lipgloss.DoubleBorder()).
			BorderForeground(theme.Accent()).
			Padding(1, 2).
			Width(width),
	}
}

// SetTitle sets the card title with optional icon
func (c *Card) SetTitle(title, icon string) *Card {
	c.title = title
	c.titleIcon = icon
	return c
}

// SetDescription sets the card description
func (c *Card) SetDescription(description string) *Card {
	c.description = description
	return c
}

// AddMetadata adds a key-value metadata item
func (c *Card) AddMetadata(key, value string) *Card {
	c.metadata = append(c.metadata, MetadataItem{Key: key, Value: value})
	return c
}

// SetSelected sets the selected state
func (c *Card) SetSelected(selected bool) *Card {
	c.selected = selected
	return c
}

// SetFocused sets the focused state
func (c *Card) SetFocused(focused bool) *Card {
	c.focused = focused
	return c
}

// SetStyles allows custom style configuration
func (c *Card) SetStyles(normal, selected, focused lipgloss.Style) *Card {
	c.normalStyle = normal
	c.selectedStyle = selected
	c.focusedStyle = focused
	return c
}

// Render produces the card's visual output
func (c *Card) Render() string {
	// Select appropriate style
	style := c.normalStyle
	if c.focused {
		style = c.focusedStyle
	} else if c.selected {
		style = c.selectedStyle
	}
	
	// Calculate content width (accounting for border and padding)
	contentWidth := c.width - 6 // 2 for border, 4 for padding
	if contentWidth < 10 {
		contentWidth = 10
	}
	
	// Build content
	var content strings.Builder
	
	// Title line
	titleLine := c.title
	if c.titleIcon != "" {
		titleLine = fmt.Sprintf("%s %s", c.titleIcon, c.title)
	}
	titleStyle := lipgloss.NewStyle().
		Bold(true).
		Foreground(theme.TextPrimary())
	content.WriteString(titleStyle.Render(titleLine))
	content.WriteString("\n")
	
	// Description (if any)
	if c.description != "" {
		content.WriteString("\n")
		descStyle := lipgloss.NewStyle().
			Foreground(theme.TextSecondary())
		truncated := truncate.String(c.description, uint(contentWidth))
		content.WriteString(descStyle.Render(truncated))
		content.WriteString("\n")
	}
	
	// Metadata section
	if len(c.metadata) > 0 {
		content.WriteString("\n")
		metaStyle := lipgloss.NewStyle().
			Foreground(theme.TextTertiary())
		
		for i, meta := range c.metadata {
			if i > 0 {
				content.WriteString(" â€¢ ")
			}
			content.WriteString(metaStyle.Render(fmt.Sprintf("%s: %s", meta.Key, meta.Value)))
		}
	}
	
	// Apply the selected style and render
	return style.Render(content.String())
}

// RenderCompact renders a more compact version of the card
func (c *Card) RenderCompact() string {
	// Similar to Render but with less padding and no description
	compactStyle := c.normalStyle.Copy().Padding(0, 1)
	if c.focused {
		compactStyle = c.focusedStyle.Copy().Padding(0, 1)
	} else if c.selected {
		compactStyle = c.selectedStyle.Copy().Padding(0, 1)
	}
	
	titleLine := c.title
	if c.titleIcon != "" {
		titleLine = fmt.Sprintf("%s %s", c.titleIcon, c.title)
	}
	
	return compactStyle.Render(titleLine)
}

// Example usage:
/*
func main() {
	card := components.NewCard(60).
		SetTitle("Markdown Assistant", "ðŸ§©").
		SetDescription("A helpful assistant for writing and formatting Markdown documents with live preview.").
		AddMetadata("Version", "1.2.0").
		AddMetadata("Type", "extension").
		AddMetadata("Author", "Anthropic").
		SetSelected(true)
	
	fmt.Println(card.Render())
}
*/