{
  "id": "github-tools",
  "name": "GitHub Integration Tools",
  "version": "1.0.0",
  "description": "Comprehensive GitHub API integration with best practices for authentication, rate limiting, and common operations",
  "mcp_servers": {
    "github-api": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-github"],
      "cwd": ".",
      "env": {
        "GITHUB_TOKEN": "$GITHUB_TOKEN"
      },
      "timeout": 30000
    }
  },
  "context_file_name": "GITHUB.md",
  "context_content": "# GITHUB.md - GitHub API Integration Guide\n\nThis guide provides best practices for integrating with GitHub's API, handling authentication, and following GitHub's conventions.\n\n## Authentication\n\n### Personal Access Tokens (Recommended)\n\n```bash\n# Set your GitHub token as an environment variable\nexport GITHUB_TOKEN=\"ghp_xxxxxxxxxxxxxxxxxxxx\"\n\n# Use in API requests\ncurl -H \"Authorization: token $GITHUB_TOKEN\" \\\n     https://api.github.com/user\n```\n\n### GitHub CLI Authentication\n\n```bash\n# Authenticate with GitHub CLI\ngh auth login\n\n# Use gh API commands\ngh api user\ngh api repos/:owner/:repo/issues\n```\n\n## API Best Practices\n\n### Rate Limiting\n\n```python\nimport requests\nimport time\n\nclass GitHubClient:\n    def __init__(self, token):\n        self.token = token\n        self.session = requests.Session()\n        self.session.headers.update({\n            'Authorization': f'token {token}',\n            'Accept': 'application/vnd.github.v3+json'\n        })\n    \n    def request_with_retry(self, url, method='GET', **kwargs):\n        \"\"\"Make request with rate limit handling\"\"\"\n        response = self.session.request(method, url, **kwargs)\n        \n        # Check rate limit\n        remaining = int(response.headers.get('X-RateLimit-Remaining', 0))\n        if remaining == 0:\n            reset_time = int(response.headers.get('X-RateLimit-Reset', 0))\n            sleep_time = reset_time - time.time() + 1\n            if sleep_time > 0:\n                print(f\"Rate limit hit. Sleeping for {sleep_time} seconds\")\n                time.sleep(sleep_time)\n                return self.request_with_retry(url, method, **kwargs)\n        \n        response.raise_for_status()\n        return response\n```\n\n### Pagination\n\n```python\ndef get_all_items(self, url):\n    \"\"\"Get all items handling pagination\"\"\"\n    items = []\n    \n    while url:\n        response = self.request_with_retry(url)\n        items.extend(response.json())\n        \n        # Check for next page\n        link_header = response.headers.get('Link', '')\n        next_url = None\n        \n        for link in link_header.split(','):\n            if 'rel=\"next\"' in link:\n                next_url = link.split('<')[1].split('>')[0]\n                break\n        \n        url = next_url\n    \n    return items\n```\n\n## Common Operations\n\n### Repository Management\n\n```python\n# Create a repository\ndef create_repo(self, name, description=\"\", private=False):\n    \"\"\"Create a new repository\"\"\"\n    data = {\n        'name': name,\n        'description': description,\n        'private': private,\n        'auto_init': True,  # Initialize with README\n        'gitignore_template': 'Python',  # Add .gitignore\n        'license_template': 'mit'  # Add license\n    }\n    \n    response = self.request_with_retry(\n        'https://api.github.com/user/repos',\n        method='POST',\n        json=data\n    )\n    return response.json()\n\n# Clone repository\ndef clone_repo(repo_url, local_path):\n    \"\"\"Clone repository with progress\"\"\"\n    import subprocess\n    \n    cmd = ['git', 'clone', '--progress', repo_url, local_path]\n    process = subprocess.Popen(\n        cmd,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        universal_newlines=True\n    )\n    \n    for line in process.stdout:\n        print(line.strip())\n    \n    return process.wait() == 0\n```\n\n### Issue Management\n\n```python\n# Create an issue\ndef create_issue(self, owner, repo, title, body, labels=None, assignees=None):\n    \"\"\"Create a new issue\"\"\"\n    data = {\n        'title': title,\n        'body': body,\n        'labels': labels or [],\n        'assignees': assignees or []\n    }\n    \n    url = f'https://api.github.com/repos/{owner}/{repo}/issues'\n    response = self.request_with_retry(url, method='POST', json=data)\n    return response.json()\n\n# Search issues\ndef search_issues(self, query):\n    \"\"\"Search issues with advanced query\"\"\"\n    # Example queries:\n    # - \"is:open is:issue assignee:username\"\n    # - \"is:pr is:open review-requested:username\"\n    # - \"is:issue label:bug created:>2024-01-01\"\n    \n    url = 'https://api.github.com/search/issues'\n    params = {'q': query, 'per_page': 100}\n    \n    response = self.request_with_retry(url, params=params)\n    return response.json()['items']\n```\n\n### Pull Request Workflow\n\n```python\n# Create a pull request\ndef create_pull_request(self, owner, repo, title, head, base, body=\"\"):\n    \"\"\"Create a pull request\"\"\"\n    data = {\n        'title': title,\n        'head': head,  # Branch name or \"username:branch\"\n        'base': base,  # Target branch (usually 'main')\n        'body': body,\n        'draft': False\n    }\n    \n    url = f'https://api.github.com/repos/{owner}/{repo}/pulls'\n    response = self.request_with_retry(url, method='POST', json=data)\n    return response.json()\n\n# Review a pull request\ndef review_pull_request(self, owner, repo, pr_number, event, body=\"\"):\n    \"\"\"Submit a pull request review\"\"\"\n    # event: \"APPROVE\", \"REQUEST_CHANGES\", \"COMMENT\"\n    data = {\n        'body': body,\n        'event': event\n    }\n    \n    url = f'https://api.github.com/repos/{owner}/{repo}/pulls/{pr_number}/reviews'\n    response = self.request_with_retry(url, method='POST', json=data)\n    return response.json()\n```\n\n### GitHub Actions\n\n```yaml\n# .github/workflows/ci.yml\nname: CI\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n    \n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n    \n    - name: Run tests\n      run: |\n        pytest tests/ -v --cov=src\n    \n    - name: Upload coverage\n      uses: codecov/codecov-action@v3\n```\n\n### Webhooks\n\n```python\n# Webhook handler\nfrom flask import Flask, request\nimport hmac\nimport hashlib\n\napp = Flask(__name__)\nWEBHOOK_SECRET = 'your-webhook-secret'\n\ndef verify_webhook_signature(payload, signature):\n    \"\"\"Verify GitHub webhook signature\"\"\"\n    expected = hmac.new(\n        WEBHOOK_SECRET.encode(),\n        payload,\n        hashlib.sha256\n    ).hexdigest()\n    \n    return hmac.compare_digest(\n        f\"sha256={expected}\",\n        signature\n    )\n\n@app.route('/webhook', methods=['POST'])\ndef handle_webhook():\n    signature = request.headers.get('X-Hub-Signature-256')\n    if not verify_webhook_signature(request.data, signature):\n        return 'Invalid signature', 401\n    \n    event = request.headers.get('X-GitHub-Event')\n    payload = request.json\n    \n    if event == 'push':\n        handle_push(payload)\n    elif event == 'pull_request':\n        handle_pull_request(payload)\n    elif event == 'issues':\n        handle_issue(payload)\n    \n    return 'OK', 200\n```\n\n## GraphQL API\n\n```python\n# GraphQL queries\ndef graphql_query(self, query, variables=None):\n    \"\"\"Execute GraphQL query\"\"\"\n    url = 'https://api.github.com/graphql'\n    data = {'query': query}\n    if variables:\n        data['variables'] = variables\n    \n    response = self.request_with_retry(url, method='POST', json=data)\n    return response.json()\n\n# Example: Get repository info\nquery = '''\nquery($owner: String!, $name: String!) {\n  repository(owner: $owner, name: $name) {\n    name\n    description\n    stargazerCount\n    forkCount\n    issues(states: OPEN) {\n      totalCount\n    }\n    pullRequests(states: OPEN) {\n      totalCount\n    }\n    releases(last: 1) {\n      nodes {\n        tagName\n        publishedAt\n      }\n    }\n  }\n}\n'''\n\nvariables = {'owner': 'octocat', 'name': 'hello-world'}\nresult = graphql_query(query, variables)\n```\n\n## Git Operations\n\n### Commit Best Practices\n\n```bash\n# Good commit messages\ngit commit -m \"feat: add user authentication module\"\ngit commit -m \"fix: resolve memory leak in data processor\"\ngit commit -m \"docs: update API documentation\"\ngit commit -m \"refactor: simplify error handling logic\"\n\n# Conventional commits\n# Format: <type>(<scope>): <subject>\n# Types: feat, fix, docs, style, refactor, test, chore\n```\n\n### Branch Management\n\n```bash\n# Create feature branch\ngit checkout -b feature/add-oauth-support\n\n# Create from specific commit\ngit checkout -b fix/memory-leak abc123\n\n# Push new branch\ngit push -u origin feature/add-oauth-support\n\n# Delete local and remote branch\ngit branch -d feature/old-feature\ngit push origin --delete feature/old-feature\n```\n\n### Working with Forks\n\n```bash\n# Add upstream remote\ngit remote add upstream https://github.com/original/repo.git\n\n# Sync fork with upstream\ngit fetch upstream\ngit checkout main\ngit merge upstream/main\ngit push origin main\n\n# Create PR from fork\ngh pr create --base upstream:main --head yourusername:feature-branch\n```\n\n## Security Best Practices\n\n### Secret Scanning\n\n```python\n# Never commit secrets\n# Use environment variables\nimport os\n\nGITHUB_TOKEN = os.environ.get('GITHUB_TOKEN')\nif not GITHUB_TOKEN:\n    raise ValueError(\"GITHUB_TOKEN environment variable not set\")\n\n# Use .gitignore\n# .env\n# *.key\n# *.pem\n# config/secrets.yml\n```\n\n### Dependabot Configuration\n\n```yaml\n# .github/dependabot.yml\nversion: 2\nupdates:\n  - package-ecosystem: \"pip\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n    open-pull-requests-limit: 10\n    \n  - package-ecosystem: \"github-actions\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n```\n\n### Code Scanning\n\n```yaml\n# .github/workflows/codeql.yml\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '30 5 * * 1'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    \n    strategy:\n      matrix:\n        language: [ 'python' ]\n    \n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n    \n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n    \n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n    \n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```\n\n## GitHub CLI Examples\n\n```bash\n# Repository operations\ngh repo create my-project --public\ngh repo clone owner/repo\ngh repo view owner/repo --web\n\n# Issue operations\ngh issue create --title \"Bug report\" --body \"Description\"\ngh issue list --label \"bug\"\ngh issue close 123\n\n# PR operations\ngh pr create --fill\ngh pr list --state open\ngh pr review 456 --approve\ngh pr merge 456 --squash\n\n# Workflow operations\ngh workflow list\ngh workflow run ci.yml\ngh run list --workflow=ci.yml\n\n# Release operations\ngh release create v1.0.0 --notes \"First release\"\ngh release download v1.0.0\n```\n\n## Error Handling\n\n```python\nclass GitHubError(Exception):\n    \"\"\"Base exception for GitHub operations\"\"\"\n    pass\n\nclass RateLimitError(GitHubError):\n    \"\"\"Rate limit exceeded\"\"\"\n    pass\n\nclass NotFoundError(GitHubError):\n    \"\"\"Resource not found\"\"\"\n    pass\n\ndef handle_github_error(response):\n    \"\"\"Handle GitHub API errors\"\"\"\n    if response.status_code == 404:\n        raise NotFoundError(\"Resource not found\")\n    elif response.status_code == 403:\n        if 'rate limit' in response.text.lower():\n            raise RateLimitError(\"Rate limit exceeded\")\n        raise GitHubError(\"Forbidden\")\n    elif response.status_code >= 400:\n        raise GitHubError(f\"API error: {response.text}\")\n```\n\n## Best Practices Summary\n\n1. **Always use authentication** for better rate limits\n2. **Handle rate limiting** gracefully with retries\n3. **Use pagination** for large result sets\n4. **Verify webhooks** with signatures\n5. **Never commit secrets** - use environment variables\n6. **Follow conventional commits** for clear history\n7. **Use GitHub Actions** for CI/CD\n8. **Enable security features** like Dependabot and CodeQL\n9. **Cache API responses** when appropriate\n10. **Use GraphQL** for complex queries to reduce API calls\n\nRemember: The GitHub API is powerful but has limits. Design your integrations to be respectful of rate limits and efficient in their API usage.",
  "metadata": {
    "created_at": "2024-01-01T00:00:00Z",
    "updated_at": "2024-01-01T00:00:00Z",
    "tags": ["github", "api", "git", "version-control", "ci-cd"],
    "is_builtin": false,
    "author": "Gemini CLI Manager Team"
  }
}